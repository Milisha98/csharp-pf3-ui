@page "/amortisation"
@using PF3_UI.Mortgage;
@using PF3.EndPoints;
@using PF3.Enums;
@using PF3.Models;
@using PF3.Mutators;
@using PF3.Time;


<h1>Amortisation</h1>

<div class="row">
    <label for="txtBalance" class="col-sm-2">Balance</label>
    <input id="txtBalance" type="text" class="col-sm-2" @bind:event="oninput" @bind="@vm.Balance" />
</div>

<div class="row">
    <label for="txtInterest" class="col-sm-2">Interest</label>
    <input id="txtInterest" type="text" class="col-sm-1" @bind:event="oninput" @bind="@vm.Interest" />
</div>

<div class="row">
    <label for="cboYear" class="col-sm-2">Years</label>
    <select name="cboYear" id="cboYear" @bind="@vm.Term" class="col-sm-2">
        <option value=30>30 Years</option>
        <option value=25>25 Years</option>
        <option value=20>20 Years</option>
        <option value=15>15 Years</option>
        <option value=10>10 Years</option>
        <option value=5>5 Years</option>
    </select>
</div>

<div class="row">
    <label class="col-sm-2" for="cboPeriod">Payment Period</label>
    <select name="cboPeriod" id="cboPeriod" @bind="@vm.PaymentPeriod" class="col-sm-2">
        <option value=12>Per Month</option>
        <option value=26>Per Fortnight</option>
        <option value=52>Per Week</option>
    </select>    
</div>

<div class="row">
    <label for="txtBalance" class="col-sm-2">Actual Repayment</label>
    <input id="txtBalance" type="text" class="col-sm-1" @bind:event="oninput" @bind="@vm.ActualRepayment" />
    
    @if (vm.RequiredRepayment.HasValue)
    {
        <div class="alert alert-@(vm.RepaymentWarningClass)" role="alert">
            <span>Required Repayment: @(vm.RequiredRepayment.Value.ToString("c"))</span>
        </div>
    }
    
</div>

<div class="row">
    <button @onclick="@CalculateSchedule">Calculate Schedule</button>
</div>

<!-- Display the Results -->
@if (vm.PublishMessages?.Any() == true)
{
<div class="container">
    @foreach (var row in vm.PublishMessages)
    {
        <div class="row">
            <div class="col-sm-2">@(row.When.ToString("MMM-yyyy"))</div>
            <div class="col-sm-1">@(row.Balance.ToString("c"))</div>
        </div>
    }
</div>
}

@code {
    private ViewModel vm = new ViewModel();

    private void CalculateSchedule()
    {
            var balanceAmount = (float)vm.Model.Balance;
            var repaymentAmount = (float)vm.Model.ActualRepayment;
            var interestRate = (float)vm.Model.Interest / 100f;
            var accountName = "Mortgage";

            ITime period;
            switch (vm.Model.PaymentPeriod)
            {
                case Mortgage.Period.Weekly:
                    period = new WeekPeriod();
                    break;
                case Mortgage.Period.Fortnightly:
                    period = new WeekPeriod(2);
                    break;
                default:
                    period = new MonthPeriod();
                    break;
            }

            // Patterns
            var interest = new PercentCreditMutator("Interest", accountName, new DayPeriod(), DateTime.Today, DateTime.MaxValue, (interestRate / 365f), 10, TransactionType.Interest);
            var repayment = new FixedDebitMutator("Repayment", accountName, period, DateTime.Today, DateTime.MaxValue, repaymentAmount, 5, TransactionType.Payment);
            var mutators = new List<IMutator> { interest, repayment };

            // Construct Entities
            var pattern = new PublishPattern(new MonthPeriod(), DateTime.Now);
            var ep = new DebitEndPoint(accountName, 0f);
            var account = new Account(accountName, AccountType.Credit, 0f, balanceAmount);
            var scenario = new Scenario("Amortisation Schedule", new List<Account> { account }, mutators, new List<IEndPoint> { ep }, pattern);
            
            // Execute
            var results = scenario.Execute().ToList();
            vm.PublishMessages = results;
            
    }
}
